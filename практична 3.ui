import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QGraphicsView
from cardio_cycle_updated import Ui_MainWindow
from PySide6 import QtCharts
from PySide6 import QtCore
import numpy as np
import matplotlib.pyplot

def gauss_function(t, A, mu, sigma):
    return A * np.exp(-((t - mu) ** 2) / (2 * sigma ** 2))

def generate_ECG_component(t, A, mu, sigma_function, duration):
    signal = np.zeros_like(t)
    idx = (t >= mu - duration * sigma_function(mu)) & (t <= mu + duration * sigma_function(mu))
    signal[idx] = gauss_function(t[idx], A, mu, sigma_function(t[idx]))
    # print("Generated component:", signal)  # Добавим вывод сгенерированных компонентов ЭКГ для отладки
    return signal

def sigma_function(t, mu, sigma_max, sigma_min):
    return np.where(t < mu, sigma_min, sigma_max)

class CardioCucle(QMainWindow):
    def __init__(self):
        super(CardioCucle, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # Параметры гауссовых функций для генерации компонентов ЭКГ
        self.parameters = {
            'P': {'A': 0.11, 'mu': 0.18, 'sigma_max': 0.016, 'sigma_min': 0.016, 'duration': 3},
            'Q': {'A': -0.11, 'mu': 0.22, 'sigma_max': 0.01, 'sigma_min': 0.01, 'duration': 3},
            'R': {'A': 1.0, 'mu': 0.27, 'sigma_max': 0.01, 'sigma_min': 0.01, 'duration': 3},
            'S': {'A': -0.18, 'mu': 0.315, 'sigma_max': 0.015, 'sigma_min': 0.015, 'duration': 3},
            'ST': {'A': 0, 'mu': 0.38, 'sigma_max': 0.04, 'sigma_min': 0.04, 'duration': 3},
            'T': {'A': 0.2, 'mu': 0.531, 'sigma_max': 0.05, 'sigma_min': 0.023, 'duration': 3}
        }

        self.ui.pushButton.clicked.connect(self.update_parameters)
        self.ui.pushButton_1.clicked.connect(self.graph)

        self.graph()

    def update_parameters(self):
        amplitude_str = self.ui.lineEdit.text()
        time_str = self.ui.lineEdit_2.text()
        width1_str = self.ui.lineEdit_3.text()
        width2_str = self.ui.lineEdit_4.text()

        selected_key = self.get_selected_radio_button()

        if amplitude_str and time_str and width1_str and width2_str and selected_key:
            amplitude = float(amplitude_str)
            time = float(time_str)
            width1 = float(width1_str)
            width2 = float(width2_str)

            self.parameters[selected_key]['A'] = amplitude
            self.parameters[selected_key]['mu'] = time
            self.parameters[selected_key]['sigma_max'] = width1
            self.parameters[selected_key]['sigma_min'] = width2

            self.graph()

    def get_selected_radio_button(self):
        if self.ui.radioButton.isChecked():
            return 'P'
        elif self.ui.radioButton_3.isChecked():
            return 'Q'
        elif self.ui.radioButton_5.isChecked():
            return 'R'
        elif self.ui.radioButton_4.isChecked():
            return 'S'
        elif self.ui.radioButton_2.isChecked():
            return 'ST'
        elif self.ui.radioButton_6.isChecked():
            return 'T'
        else:
            return None

    def graph(self):
        # Обновляем график ЭКГ
        graph_rate_str = self.ui.lineEdit_5.text()
        graph_rate = float(graph_rate_str)
        # t = np.linspace(0, 1, 1000)
        t = np.linspace(0, graph_rate, 1000)
        ECG_components = {}
        for component, params in self.parameters.items():
            ECG_components[component] = generate_ECG_component(t, params['A'], params['mu'],
                                                               lambda t: sigma_function(t, params['mu'],
                                                                                        params['sigma_max'],
                                                                                        params['sigma_min']),
                                                               params['duration'])

        ECG_signal = sum(ECG_components.values())

        series = QtCharts.QLineSeries()
        for i in range(len(t)):
            ecg_value = sum(ECG_components[component][i] for component in self.parameters.keys())
            series.append(i, ecg_value)  # Добавляем значения времени t[i] и сигнала ECG_signal[i]

        chart = QtCharts.QChart()
        chart.addSeries(series)

        chart.createDefaultAxes()
        chart.axisX().setGridLineVisible(True)
        chart.axisY().setGridLineVisible(True)

        # Подписываем оси
        chart.axisX().setTitleText("Время")
        chart.axisY().setTitleText("Амплитуда")

        self.ui.graphicsView.setChart(chart)




if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CardioCucle()
    window.show()

    sys.exit(app.exec())